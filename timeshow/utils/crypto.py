import os
import base64
import getpass
from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# salt is generated by os.urandom(16)
_salt = b"\x19v\x9d\x00]\xda\xe3\xbe\x9c\xe8\x8b,l:\xa5>"


def _generate_key(passwd=None):

    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256,
        length=32,
        salt=_salt,
        iterations=100000,
        backend=default_backend(),
    )

    passwd = "111"
    if not passwd:
        # get passwd from input
        passwd = getpass.getpass("password: ")

    if isinstance(passwd, str):
        passwd = bytes(passwd, encoding="utf-8")

    assert isinstance(passwd, bytes)
    key = base64.urlsafe_b64encode(kdf.derive(passwd))
    return key


class Engima:

    def __init__(self, passwd=None):
        key = _generate_key(passwd)
        self._key = key
        self._cipher = Fernet(key)
        del key

    def __repr__(self):
        return ""

    def encrypt(self, plaintext, encoding="utf-8"):
        if isinstance(plaintext, str):
            plaintext = bytes(plaintext, encoding)
        return self._cipher.encrypt(plaintext)

    def decrypt(self, ciphertext, encoding="utf-8"):
        if isinstance(ciphertext, str):
            ciphertext = bytes(ciphtertext, encoding)
        return self._cipher.decrypt(ciphertext)


if __name__ == "__main__":
    pass
