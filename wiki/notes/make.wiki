= Variable =

= Variable assignment =

`=`: Creates recursive variables. It is expanded immediately.

`:=`: Creates simple variables. It is deferred until is used.

`?=`: Creates variable only if the variable does not yet have a value. It is
deferred until is used.

`+=`: Appends text to a variable. If the lefthand side was originally defined
as a simple variable, it is expanded immediately. Otherwise, its evaluation is
deffered.

| Definition | Expansion of a | Expansion of b        |
|------------|----------------|-----------------------|
| a = b      | Immediate      | Deferred              |
| a :=b      | Immediate      | Immediate             |
| a ?= b     | Immediate      | Deferred              |
| a += b     | Immediate      | Immediate or Deferred |

== Variable overriding ==

=== Environment ===

All the variables from environment are automatically defined as make variables
when make starts. These variables have very low precedence, so assignments
within the makefile or command-line arguments will override the value of an
environment variable. You can cause environment variables to override
makefile variable using the `-e` command-line option.

=== Command line ===

Variables can be defined or redifined directly from the make command line:
{{{
    make CFLAGS=-g CPPFLAGS='-DBSD -DDEBUG'
}}}

An assignment of a variable on the command line overrides any value from the
environment and any assignment in the makefile.

Command-line assignments can set either simple or recursive variable by using
`:=` or `=`, respecitively.

It's possible using the `override` directive to allow a makefile assignment to
be used instead of a command-line assignment.

= References =

-   Managing Projects with GNU Make (Third Edition)

-   `man make`
