== Generating SSH keys ==

{{{
    ssh-keygen -f ~/.ssh/an9wer_rsa -o -a 100 -t rsa -b 4096 -C "an9wer@gmail.com"
}}}

-   `-f`: specifies the filename of the key file.

-   `-t`: specifies the type of key to create.

-   `-b`: specifies the number of bits in the key to create.

-   `-o`: saves private keys using the new OpenSSH format rather than the more compatible PEM format. The new format has increased resistance to brute-force password cracking .

-   `-a`: specifies the number of KDF (key derivation function) rounds used. Higher numbers result in slower passphrase verification and increased resistance to brute-force password cracking (should the keys be stolen).

-   `-C`: provides a new comment.

== Copy public key to remote server ==

{{{
    ssh-copy-id -i ~/.ssh/an9wer_rsa.pub an9wer@example.com
}}}

-   `-i`: specifies the public key to be sent to remote server.


== SSH agents ==

Check whether SSH agent is started:

{{{
    echo $SSH_AGENT_PID
}}}

If some number display on the screen, it means the agent has been started.
Otherwise, you should run the following command to start it:

{{{
    eval $(ssh-agent)
}}}

You can also kill the current agent:

{{{
    ssh-agent -k
}}}

== Add ssh key to agent ==

This command will add private ssh key `~/.ssh/an9wer_rsa` into authentication
agent.

{{{
    ssh-add ~/.ssh/an9wer_rsa
}}}

== ~/.ssh/config  ==

If you want to setup aliases for servers you access often, you can create the
file `~/.ssh/config` and specify each server in it. A simple example is as
follows:

{{{
    Host example0
        HostName example0.com

    Host example1
        HostName example1.com
        LocalForward 80 example.com:80

    Host *
        User an9wer
        Port 22
}}}

== SSH tunnels ==

=== Local port forwarding ===

The `-L` option of ssh binds the given port on local host to the given port on
remote host. Here's some examples:

{{{
    ssh -fN -L 8000:github.com:80 user@example.com
}}}

In this example, the server `example.com` will forward any connections from
port 8000 on local side to `github.com` at port 80. It's just like the server
`example.com` makes a tunnel between local and `github.com`.

{{{
    ssh -fN -L 8000:localhost:80 user@example.com
}}}

The difference between this example and previous one is the remote host being
changed to `localhost:80`. This means it will forward connectons from local
port 8000 to port 80 on `localhost` of the server `example.com`.

=== Remote port forwarding ===

The `-R` option of ssh specifies that the connection to the given port on remote
server will be forwarding to the local side.

{{{
    ssh -fN -R 80:localhost:8000 user@example.com
}}}

This command will forward connections from port 80 on the server `example.com`
to port 8000 on local side.

*Note*: SSH doesnâ€™t by default allow remote hosts to forwarded ports. To enable
this open `/etc/ssh/sshd_config` and add the following line somewhere in that
config file.

{{{
    GatewayPorts yes
}}}

Then when you connect to example.com:80, it'll forward to localhost:8000 on
local side. If you don't have `GatewayPorts yes` in your configuration file,
it'll only forward localhost:80 on example.com to localhost:8000 on local side.

== autossh ==

{{{
    autossh [-M port[:echo_port]] [-f] [SSH_OPTIONS]
}}}

-   `-M`: specifies the base monitoring port to use.

-   `-f`: causes autossh to drop to the background before running ssh.

*Note*: `-M 0` sets the monitor port to 0 turns the monitoring function off,
and autossh will only restart ssh upon ssh's exit. For example, if you are
using a recent version of OpenSSH, you may wish to explore using the
`ServerAliveInterval` and `ServerAliveCountMax` options to have the SSH client
exit if it finds itself no longer connected to the server. In many ways this
may be a better solution than the monitoring port.

*Note*: There is a crucial a difference between `-f` with autossh, and `-f`
with ssh: when used with autossh ssh will be unable to ask for passwords or
passphrases. 

In the following example, autossh send data on port 20000 and receive it back
on 20001:

{{{
    autossh -M 20000 -R 80:localhost:8000 an9wer@example.com
}}}

In the following example, we turn the autossh monitoring function off, instead,
we use ssh built-in function to monitor connection:

{{{
    autossh -M 0 -o "ServerAliveInterval 240" -o "ServerAliveCountMax 12" -R 80:localhost:8000 an9wer@example.com
}}}

We can also write these options to `~/.ssh/config` file:

{{{
    Host example
        HostName example.com
        User an9wer
        Port 22
        IdentityFile ~/.ssh/an9wer_rsa
        RemoteForward 80 localhost:8000
        ServerAliveInterval 240
        ServerAliveCountMax 12
}}}

And we can call it easily by the following command:

{{{
    autossh -M 0 -f -N example
}}}

== Acknowledgements ==

-   [[https://wiki.archlinux.org/index.php/SSH_keys|ssh key]]

-   [[https://blog.trackets.com/2014/05/17/ssh-tunnel-local-and-remote-port-forwarding-explained-with-examples.html|ssh tunnel]]

-   [[https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/|autossh]]
