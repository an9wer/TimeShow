== Variables ==

`PROMPT_COMMAND`: If set, the value is executed as a command prior to issuing
each primary prompt.

== $'string' ==

(see [[https://github.com/an9wer/ltips/blob/master/Bash/quoting.sh|examples]])

Words of the form $'string' are treated specially. The word expands to string,
with backslash-escaped characters replaced as specified  by the ANSI C
standard. Backslash escape sequences, if present, are decoded as follows:

{{{
    \a             alert (bell)
    \b             backspace
    \e
    \E             an escape character
    \f             form feed
    \n             new line
    \r             carriage return
    \t             horizontal tab
    \v             vertical tab
    \\             backslash
    \'             single quote
    \"             double quote
    \?             question mark
    \nnn           the eight-bit character whose value is the octal value nnn (one to three digits)
    \xHH           the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
    \uHHHH         the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHH (one to four hex digits)
    \UHHHHHHHH     the Unicode (ISO/IEC 10646) character whose value is the hexadecimal value HHHHHHHH (one to eight hex digits)
    \cx            a control-x character
}}}

The expanded result is single-quoted, as if the dollar sign had not been
present. For example:

{{{
    $ echo abc$'\b'd
    abd
}}}
{{{
    $ echo 123$'\n'321
    123
    321
}}}

== $"string" ==

(see [[https://github.com/an9wer/ltips/blob/master/Bash/quoting.sh|examples]])

A double-quoted string preceded by a dollar sign `$"string"` will cause the
string to be translated according to the current locale.  If the current locale
is C or POSIX, the dollar sign is ignored.  If the string is translated and
replaced, the replacement is double-quoted. For example:

{{{
    $ echo abc$"\b"d
    abc\bd
}}}
{{{
    $ echo 123$"\n"321
    123\n321
}}}



== Parameter Expansion ==

(see [[https://github.com/an9wer/ltips/blob/master/Bash/parameter_expansion.sh|examples]])

-   `${parameter:offset}`
    `${parameter:offset:length}`

It expands to the substring of the value of `parameter` starting at the
character specified by `offset` and expanding to up to `length` characters.

`offset` and `length` are arithmetic expressions. If `offset` or `length`
evaluates to a number less than zero, the value is used as an offset in
characters from the end of value of `parameter`.

*Note* that a negative `offset` must be separated from the colon by at least
one space to avoid being confused with the `:-` expansion. 

When `parameter` is a variable whose value is string:

{{{
    $ string=0123456789
    $ echo ${string:2}
    23456789
    $ echo ${string:2:4}
    2345
    $ echo ${string:2:-2}
    234567
    $ echo ${string: -4}
    6789
    $ echo ${string: -4:-2}
    67
}}}

{{{
    $ array[0]=0123456789
    $ echo ${array[0]:2}
    23456789
    $ echo ${array[0]:2:4}
    2345
    $ echo ${array[0]:2:-2}
    234567
    $ echo ${array[0]: -4}
    6789
    $ echo ${array[0]: -4:-2}
    67
}}}

When `parameter` is '@' (*Note*: it's an expansion error if `length` evaluates
to number less than zero):

{{{
    $ set -- 0 1 2 3 4 5 6 7 8 9
    $ echo ${@:2}
    23456789
    $ echo ${@:2:4}
    2345
    $ echo ${@:2:-2}
    bash: -2: substring expression < 0
    $ echo ${@: -4}
    6789
    $ echo ${@: -4:-2}
    bash: -2: substring expression < 0
}}}

When `parameter` is an indexed array name subscripted by '@' or '*' (*Note*:
it's an expansion error if `length` evaluates to number less than zero):

{{{
    $ array=(0 1 2 3 4 5 6 7 8 9)
    $ echo ${array[@]:2}
    23456789
    $ echo ${array[@]:2:4}
    2345
    $ echo ${array[@]:2:-2}
    bash: -2: substring expression < 0
    $ echo ${array[@]: -4}
    6789
    $ echo ${array[@]: -4:-2}
    bash: -2: substring expression < 0
}}}


== Acknowledgements ==

-   [[https://www.gnu.org/software/bash/manual/bash.html]]

-   `man bash`
