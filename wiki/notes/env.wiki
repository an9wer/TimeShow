= env =

{{{
    env [OPTION]... [-] [NAME=VALUE]... [COMMAND [ARG]...]
}}}

The program env without any arguments will output all environment variables.
The effect is like precediing command by all these variables, i.e.
`NAME=VALUE COMMAND`.

== Options ==

`-i`: Start with an empty environment.

`-0`: End each output line with NUL, not newline.

`-u NAME`: Remove variable from the environment.

`-C DIR`: Change working directory to DIR.

`-S S`: Process and split S into separate arguments; used to pass multiple
arguments on shebang lines.

== Examples ==

Output all environment variables:
{{{
    env
}}}

Output all environment variables by replacing newline with NUL:
{{{
    env -0
}}}

Output nothing:
{{{
    env -i
}}}

Remove variable PATH, then output remaining variables:
{{{
    env -u PATH
}}}

Remove variable PATH, then use python to print the value of PATH. It will cause
error for the variable PATH is unsetted:
{{{
    $ env -u PATH python -c "import os; print(os.environment['PATH'])"
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/usr/lib/python2.7/UserDict.py", line 40, in __getitem__
        raise KeyError(key)
    KeyError: 'PATH'
}}}

Used in shebang, with mutliple arguments:
{{{
    #!/usr/bin/env python -t -b
}}}

= References =

-   `man env`
