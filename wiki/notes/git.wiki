There are three main components of a Git project:

1.  `Working tree`: or working directory, consists of files that you are
    currently working on. The state of files in working tree is `modified`.
2.  `Index`: or staging area, is where commits are prepared. The state of files
    in index is `staged` or `tracked`.
3.  `Repository`: or repo, is the container that tracks the changes to your
    project files. It holds all the commits that have been made. The state of
    fils in repository is `committed`.

{{{
    working tree --(git add)-> index --(git commit)-> repository
}}}
            

= git status =

{{{
    git status [<options>...] [--] [<pathspec>...]
}}}

== Options ==

-   `-s`: Give the output in the short-format.
-   `-b`: Show the branch and tracking info even in short-format.
-   `--porcelain[=version]`: Given the output in an easy-to-parse-format for
    scripts.The version parameter is used to specify the format version, which
    value is v1 (default) or v2.
-   `--long`: Give the output in the long-format. This is the default.
-   `-u[<mode>]`: Show untracked files. The mode parameter is used to
    specificed the handling of untracked files, if specified, it must be stuck
    to the option(e.g. `-uno`, but not `-u no`).
    -   `no`: Show no untracked files.
    -   `normal`: Show untracked files and directories.
    -   `all`: Also show individual files in untracked directories. (default)
-   `--ignored`: Show ignored files as well.


= git symbolic-ref =

{{{
    git symbolic-ref [-q] [--short] <name>
    git symbolic-ref [-m <reason>] <name> <ref>
    git symbolic-ref --delete [-q] <name>
}}}

When given on argument, reads which branch head the given symbolic refers to
and outputs its path, relative to the `.git` directory.

When given two arguments, creates or updates a symbolic ref `name` to point at
the given branch `ref`.

When given `--delete` and an additional argument, deletes the given symbolic
ref.

*Note*: The position of symbolic ref is located in `.git` directory (e.g.
`.git/HEAD`).

== Examples ==

Output the path refered by the symbolic ref `HEAD`.  
{{{
    git symbolic-ref HEAD
}}}

Create a symbolic ref named with `DEV`, then refers it to `refs/heads/dev`, if
the symbolic ref `DEV` doesn't exist.  Otherwise it will just update the
content of symbolic ref `DEV` to `refs/heads/dev`.
{{{
    git symbolic-ref DEV refs/heads/dev
}}}

Delete symbolic ref `DEV` created before.
{{{
    git symbolic-ref --delete DEV
}}}
