= Which cron is right for the job? =

-   `vixie-cron`: Vixie-cron is a full featured cron implementation based on
    SysV cron. Each user has his own crontab and is allowed to specify
    environment variables within that crontab. Unlike the other cron variants,
    it also offers support for SELinux and PAM. It supports fewer architectures
    than Dcron, but more than Fcron. Latest version is 4.1 released on January 2004. 

-   `cronie`: Cronie (sys-process/cronie) is a fork of vixie-cron done by
    Fedora. Because of it being a fork it has the same feature set the original
    vixie-cron provides. Additionally cronie comes with an anacron
    implementation which must be enabled through the anacron USE flag. 

-   `dcron`: Dcron aims to be a simple, elegant and secure implementation of
    cron. It does not allow the specification of environment variables in
    crontabs and all cron-jobs are run from /bin/sh. Like vixie-cron, each user
    has his own crontab. As of version 4 it contains anacron-like features. 

-   `fcron`: Fcron aims at replacing vixie-cron and anacron. It is designed to
    work on systems that are not continuously running and it is packed with
    extra features. It has job startup constraints, job serialization controls,
    the ability to assign nice values to jobs and the ability to schedule jobs
    to run at system startup. See fcron's home page for more information. 

-   `bcron`: Bcron is a new cron system designed with secure operations in
    mind. To do this, the system is divided into several separate programs,
    each responsible for a separate task, with strictly controlled
    communications between them. The user interface is a drop-in replacement
    for similar systems (such as vixie-cron), but the internals differ greatly.

-   `anacron`: Anacron is not a cron daemon, it is something that usually works
    in conjunction with one. It executes commands at intervals specified in
    days and it does not assume that the system is running continuously; it
    will run jobs that were missed while the system was down. Anacron usually
    relies on a cron daemon to run it each day. 

= crontab (cronie) =

Running cron jobs can be allowed or disallowed for different users. For this
purpose, use the `/etc/cron.allow` and `/etc/cron.deny` files. If the
`/etc/cron.allow` file exists, a user must be listed in it to be allowed to use
cron. If the `/etc/cron.allow` file does not exist but the `/etc/cron.deny`
file does exist, then a user must not be listed in the `/etc/cron.deny` file in
order to use cron. If neither of these files exists, only the super user is
allowed to use cron.

== Options ==

-   `-u`: Appends the name of the user whose crontab is to be modified. If this
    option is not used, crontab examines "your" crontab, i.e. the crontab of
    the person executing the command. If no crontab exists for a particular
    user, it is create for him the first time the `crontab -u` command is used
    under his username.

-   `-l`: Displays the current crontab on the standard output.

-   `-r`: Remove the current crontab.

-   `-e`: Edits the current crontab using the editor specified by the VISUAL or
    EDITOR environment variables.

-   `-i`: This option modifies the `-r` option to prompt the user for a 'y/Y'
    response before actually removing the crontab.

Find more in `man crontab`.

== Examples ==

-   Write an9wer's crontab loading from an existing crontab file (This will
    override rules already in crontab)
    {{{
        crontab -u an9wer /path/to/crontab
    }}}

-   List an9wer's crontab:
    {{{
        crontab -u an9wer -l
    }}}

-   Edit an9wer's crontab:
    {{{
        crontab -u an9wer -e
    }}}

-   Remove an9wer's crontab:
    {{{
        crontab -u an9wer -r
    }}}

-   Remove an9wer's crontab with prompt:
    {{{
        crontab -u an9wer -ri
    }}}

= Syntax of crontab (cronie)=

Blank lines, leading spaces, and tabs are ignored. Lines whose  first
non-white space  character  is  a pound-sign (#) are comments, and are not
processed.  Note that comments are not allowed on the same line as cron
commands, since  they  are considered  a  part  of  the command.  Similarly,
comments are not allowed on the same line as environment variable settings.  

An active line in a crontab is either an environment settings or a cron
command. An environment setting is of the form:
{{{
    name = value
}}}

Where the white spaces around the equal-sign (=) are optional, and any
subsequent non-leading white spaces in value is a part of the value assigned to
name. The value string may be placed in quotes (singal or double, but matching)
to preserve leading or trailing white spaces.

Several environment variables are set up automatically by the cron daemon.

-   `SHELL`: Which by default is `/bin/sh`.

-   `LOGNAME`: Which is `/etc/passwd`. It can not be overridden by settings in
    the crontab.

-   `HOME`: Which by default is the crontab's owner.

-   `MAILTO`

-   `CRON_TZ`: Specifies the time zone used by the crontab. Note: the Time used
    for writting into a log file is taken from the local time zone, where the
    daemon is running.

-   `MSL_LEVEL`

-   `CONTENT_TYPE`

-   `CONTENT_TRANSFER_ENCODING`

-   `RANDOM_DELAY`: Allows delaying job startups by random amount of minutes
    with upper limit specified by the variable. The random scaling factor is
    determined during the cron daemon startup so it remains constant for the
    whole run time of the daemon.

The format of a cron command contains five time-and-date fields followed by a
username (if this is the system crontab file), and followed by a command.

| field        | allowed values                       |
|--------------|--------------------------------------|
| minute       | 0-59                                 |
| hour         | 0-23                                 |
| day of month | 1-31                                 |
| month        | 1-12 (or names)                      |
| day of week  | 0-7 (0 or 7 is Sunday, or use names) |

*Note*: A field my contain an asterisk (*), which always stands for
"first-last".

*Note*: Non-existent times will case jobs scheduled not to run.

*Note*: The day of a command's execution can be specified in the following two
fields -- 'day of month', and 'day of week'. If both fields are restricted
(i.e. do not contain the "*" character), the command will be run when either
field matches the current time. For example, "30 4 1 * 5" would cause a
command to be run at 4:30 am on the 1st of each month, plus every Friday.

Lists are allowed. A list is a set of numbers (or ranges) seperated by commas.
Examples: "1,2,5,9", "0-4,8-12".

Ranges of numbers are allowed. Range are two numbers seperated with a hyphen.
The specified range is inclusive. For example, 8-11 or an 'hour' entry
specifies execution at hours 8, 9, 10, and 11. The first number must be less
than or equal to the second one.

Step values can be used in conjunction with ranges. Following a range with
"/<number>" specifies skips of the number's value through the range. For
example, "0-23/2" can be used in the 'hours' field to specify command execution
for every other hour. Step values are also permitted after an asterisk, so if
specifying a job to be run every two hours, you can use "*/2".

Name can also be used for the 'month' and 'day of week' fields. Use the first
three letters of the particular day or month (case does not matter). Ranges or
lists of names are not allowed.

The command portion of the line, up to a newline or a "%" character, will be
executed by SHELL variable of the crontab file. A "%" character in the command,
unless escaped with a backslash (\), will be changed into newline characters,
and all data after the first % wil be sent to the command as standard input.

*Note*: If the UID of the owner is 0 (root), the first character of a crontab
entry can be "-" character. This will prevent cron from writing a syslog
message about the command being executed.

== Examples ==

-   Run 23 minutes after midn, 2am, 4am ... (step by 2 hour), everyday:
    {{{
        23 0-23/2 * * * date >> /tmp/date
    }}}

-   Run at 2min, 5min, 10min ... 40min (step by 3 minutes), and 56min, every
    hour.
    {{{
        2,5,10-40/3,56 * * * * date >> /tmp/date
    }}}

-   Run every 10 minutes:
    {{{
        */10 * * * * date >> /tmp/date
    }}}

-   Write "an9wer:\n  Hello world!\n" to '/tmp/greet` file after midnight, every
    day:
    {{{
        5 0 * * * cat > /tmp/greet %an9wer:%  Hello world!%
    }}}

Find more in `man 5 crontab`.
