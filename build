#!/usr/bin/env bash

PATH=venv/bin:$PATH

IN_DIR=$(realpath "$(dirname ${BASH_SOURCE[0]})/reStructuredText")
OUT_DIR=$(realpath "$(dirname ${BASH_SOURCE[0]})")

usage() {
  cat <<EOF
build [<args>] [<rst>...]

Arguments:
  -a, --all  Build all adoc files

EOF
}

build() {
  local rst html category
  set -e
  for rst in "$@"; do
    rst=$(realpath "$rst")
    if [[ ! -f $rst ]]; then
      echo "Unexisted file '$rst'."
      continue
    fi
    if [[ ! $rst =~ \.rst$ ]]; then
      echo "Unkonwn filetype '$1'."
      continue
    fi

    # Blog
    html=$(sed -nE 's@.*(20[1-9][0-9]/[01][0-9]/[0-3][0-9]_[^/]+\.rst$)@\1@p' <(echo "$rst"))
    category=blog

    # Notes
    if [[ -z $html ]]; then
      html=$(sed -nE 's@.*/(notes/.+\.rst$)@\1@p' <(echo "$rst"))
      category=notes
    fi

    # Skip `notes/ns` directory
    if grep -Eq "^notes/ns/.+\.rst$" <(echo "$html"); then
      continue
    fi

    # Index
    if [[ -z $html ]]; then
      html=$(sed -nE 's@.*/([^/]+\.rst)@\1@p' <(echo "$rst"))
      if [[ $html == blog.rst ]]; then
        category=blog
      elif [[ $html == notes.rst ]]; then
        category=notes
      elif [[ $html == tweet.rst ]]; then
        category=tweet
      elif [[ $html == about.rst ]]; then
        category=about
      else
        echo "Unknown file '$rst'."
        continue
      fi
    fi

    # Error
    [[ -z $html ]] && { echo "Some error happened."; exit 1; }


    html=$OUT_DIR/${html%\.rst}.html
    mkdir -p "$(dirname "$html")"
    #  Only build when html doesn't exist or mtime of rst or template.html is updated.
    if [[ ! -f $html ]] ||
        ([[ -f $html ]] && (( $(stat -c "%Y" "$html") <= $(stat -c "%Y" "$rst") ))) ||
        ([[ -f $html ]] && (( $(stat -c "%Y" "$html") <= $(stat -c "%Y" "$OUT_DIR/template.html") ))); then
      rst2html5.py --strict --no-doc-title --no-doc-info --template <(sed -E "/id=\"$category\"/ s/$/ class=\"current\"/" "$OUT_DIR/template.html") "$rst" "$html"
      echo -e "'$rst'\n->\t'$html'"
    fi
  done
  set +e
}

build_all() {
  local IFS=$'\n'
  build $(find "$IN_DIR" -type f -name "*.rst")
}

# main
case $1 in
  -a|--all ) build_all ;;
  *.rst    ) if [[ -n $1 ]]; then build "$@"; shift; fi ;;
  *        ) usage ;;
esac
